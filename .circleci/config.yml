version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
        workflow_id:
         type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
             echo "Destroying environment: << parameters.workflow_id >> "
             aws cloudformation delete-stack  --stack-name udapeople-backend-<<parameters.workflow_id>> 
             aws cloudformation delete-stack  --stack-name udapeople-frontend-<<parameters.workflow_id>> 
             aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [frontend-build]
      - run:
          name: Test Frontend 
          command: |
             cd frontend
             npm install
             npm run test    
             
  test-backend:
   docker:
       - image: circleci/node:13.8.0
   steps:
      - checkout
      - restore_cache:
         keys: [backend-build]
      - run:
          name: test Backend 
          command: |
             cd backend
             npm install
             npm run test            

  scan-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [frontend-build]
      - run:
          name: Scan Frontend 
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             
  scan-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [backend-build]
      - run:
          name: Scan Backend
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install gzip & tar
          command: |
             yum install -y gzip tar
            
      - run:
          name: Create Backend Infrastructure 
          command: |
           aws cloudformation deploy \
           --template-file .circleci/files/backend.yml \
           --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
           --tags project=udapeople 
      - run:
          name: Create Frontend Infrastructure 
          command: |
           aws cloudformation deploy \
           --template-file .circleci/files/frontend.yml \
           --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
           --tags project=udapeople 
      - run:
          name: Add backend ip to ansible inventory
          command: |
           aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values= backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      -   destroy-environment:
           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
         fingerprints: ["1c:50:d1:5d:15:ef:a8:58:72:47:0a:97:74:46:3f:ed"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add tar gzip ansible
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml    
      - destroy-environment:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations
      - run:
          name: Send migration results to kvdb
          command: |
           if grep -q "has been executed successfully." ./backend/migrations_dump.txt
           then
           # bucket id created from curl -d 'email=your-email-ID@domain.com' https://kvdb.io
           curl https://kvdb.io/9QYu1AzEtPnLKeZ3vG66Qb/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
           fi

workflows:
  default:
    jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]   
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [master]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
      - run-migrations
#           requires: [configure-infrastructure]
